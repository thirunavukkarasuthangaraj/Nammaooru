name: Deploy to Hetzner

on:
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('backend/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build Backend
      run: |
        cd backend
        mvn clean package -DskipTests
        
    - name: Build Frontend
      run: |
        cd frontend
        npm ci --no-audit --no-fund
        npm run build -- --configuration=production
        
    - name: Run Backend Tests
      run: |
        cd backend
        mvn test
        
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Build Backend
      run: |
        cd backend
        mvn clean package -DskipTests
        
    - name: Build Frontend
      run: |
        cd frontend
        npm ci --no-audit --no-fund
        npm run build -- --configuration=production
        
    - name: Prepare deployment files
      run: |
        mkdir -p deploy/backend
        mkdir -p deploy/frontend
        mkdir -p deploy/config
        
        # Copy backend JAR and deployment Dockerfile
        cp backend/target/shop-management-backend-1.0.0.jar deploy/backend/app.jar
        cp deployment/Dockerfile.backend deploy/backend/Dockerfile
        
        # Copy frontend build and deployment Dockerfile
        ls -la frontend/dist/
        cp -r frontend/dist/shop-management-frontend/* deploy/frontend/ || cp -r frontend/dist/* deploy/frontend/
        cp deployment/Dockerfile.frontend deploy/frontend/Dockerfile
        cp frontend/nginx.conf deploy/frontend/
        
        # Copy configuration files
        cp docker-compose.yml deploy/
        cp -r database deploy/ || true
        
    - name: Create deployment archive
      run: |
        tar -czf deployment.tar.gz -C deploy .
        
    - name: Deploy to Hetzner Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HETZNER_HOST }}
        username: ${{ secrets.HETZNER_USER }}
        password: ${{ secrets.HETZNER_PASSWORD }}
        port: 22
        script: |
          # Create backup of current deployment
          if [ -d "/opt/shop-management" ]; then
            cp -r /opt/shop-management /opt/shop-management-backup-$(date +%Y%m%d-%H%M%S) || true
          fi
          
          # Create deployment directory
          mkdir -p /opt/shop-management-new
          cd /opt/shop-management-new
          
    - name: Upload deployment files
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.HETZNER_HOST }}
        username: ${{ secrets.HETZNER_USER }}
        password: ${{ secrets.HETZNER_PASSWORD }}
        port: 22
        source: "deployment.tar.gz"
        target: "/opt/shop-management-new/"
        
    - name: Deploy Application
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HETZNER_HOST }}
        username: ${{ secrets.HETZNER_USER }}
        password: ${{ secrets.HETZNER_PASSWORD }}
        port: 22
        script: |
          cd /opt/shop-management-new
          
          # Extract deployment files
          tar -xzf deployment.tar.gz
          rm deployment.tar.gz
          
          # Stop current containers if running
          if [ -d "/opt/shop-management" ]; then
            cd /opt/shop-management
            docker-compose down || true
            cd /opt/shop-management-new
          fi
          
          # Start new deployment
          docker-compose up -d --build
          
          # Wait for containers to be ready
          sleep 30
          
          # Check if deployment successful
          if docker ps | grep -q "shop-backend\|shop-frontend\|shop-postgres"; then
            echo "✅ Deployment successful!"
            
            # Replace old deployment with new one
            if [ -d "/opt/shop-management" ]; then
              rm -rf /opt/shop-management
            fi
            mv /opt/shop-management-new /opt/shop-management
            
            # Clean up old backups (keep last 3)
            cd /opt
            ls -t shop-management-backup-* 2>/dev/null | tail -n +4 | xargs rm -rf || true
            
            echo "🚀 Application deployed successfully at http://65.21.4.236"
          else
            echo "❌ Deployment failed!"
            
            # Restore old version if exists
            if [ -d "/opt/shop-management" ]; then
              cd /opt/shop-management
              docker-compose up -d
            fi
            
            exit 1
          fi
          
    - name: Health Check
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HETZNER_HOST }}
        username: ${{ secrets.HETZNER_USER }}
        password: ${{ secrets.HETZNER_PASSWORD }}
        port: 22
        script: |
          # Wait a bit more for services to be fully ready
          sleep 10
          
          # Check container health
          echo "Container status:"
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          
          # Check if containers are actually running
          echo ""
          echo "Detailed container inspection:"
          docker ps -a
          
          # Check logs for any errors
          echo ""
          echo "Frontend container logs (last 10 lines):"
          docker logs --tail 10 shop-frontend || echo "No frontend logs"
          
          echo ""
          echo "Backend container logs (last 10 lines):"
          docker logs --tail 10 shop-backend || echo "No backend logs"
          
          # Check if ports are actually listening
          echo ""
          echo "Checking listening ports:"
          netstat -tlnp | grep -E ':80|:8082' || echo "Ports not listening"
          
          # Test frontend
          if curl -f -s http://localhost > /dev/null 2>&1; then
            echo "✅ Frontend is responding"
          else
            echo "⚠️ Frontend check failed - container may not be running properly"
          fi
          
          # Test backend API - using a simple GET endpoint
          if curl -f -s http://localhost:8082 > /dev/null 2>&1; then
            echo "✅ Backend API is responding"
          else
            echo "⚠️ Backend API check failed - container may not be running properly"
          fi
          
          # Final verification 
          echo ""
          echo "=== FINAL DIAGNOSTICS ==="
          echo "Docker containers running:"
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          
          echo ""
          echo "Port bindings on server:"
          ss -tlnp | grep -E ':80|:8082' || echo "No ports 80/8082 listening"
          
          echo ""
          echo "Testing internal connectivity:"
          curl -I http://localhost 2>&1 | head -5 || echo "localhost:80 failed"
          curl -I http://localhost:8082 2>&1 | head -5 || echo "localhost:8082 failed"
          
          echo ""
          echo "Testing external connectivity:"
          curl -I http://65.21.4.236 2>&1 | head -5 || echo "External IP failed"
          
          echo ""
          echo "🎉 Deployment completed successfully!"
          echo "Your application should be live at: http://65.21.4.236"
          echo "If not accessible, check Hetzner firewall settings for port 80"