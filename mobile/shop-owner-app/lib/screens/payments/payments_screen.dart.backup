import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:intl/intl.dart';

class PaymentsScreen extends StatefulWidget {
  final String token;

  const PaymentsScreen({super.key, required this.token});

  @override
  State<PaymentsScreen> createState() => _PaymentsScreenState();
}

class _PaymentsScreenState extends State<PaymentsScreen> {
  List<dynamic> _orders = [];
  List<dynamic> _todayOrders = []; // Store today's orders separately
  bool _isLoading = true;
  DateTime? _selectedStartDate;
  DateTime? _selectedEndDate;
  String _selectedPaymentStatus = 'ALL'; // ALL, PAID, UNPAID

  double _todayTotal = 0.0;
  int _todayOrderCount = 0;
  double _todayCollected = 0.0; // Today's paid amount
  double _totalPaid = 0.0;
  double _totalUnpaid = 0.0;
  int _paidCount = 0;
  int _unpaidCount = 0;

  // Weekly summary data (last 7 days)
  List<Map<String, dynamic>> _weeklyData = [];

  // Commission tracking
  double _platformCommission = 0.0;
  double _shopOwnerEarnings = 0.0;
  final double _commissionPercent = 0.0; // 0% commission (FREE period) - will be updated later

  @override
  void initState() {
    super.initState();
    _selectedStartDate = DateTime.now();
    _selectedEndDate = DateTime.now();
    _fetchPaymentData();
  }

  Future<void> _fetchPaymentData() async {
    setState(() {
      _isLoading = true;
    });

    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('auth_token') ?? widget.token;

      // Step 1: Get shop ID
      final myShopResponse = await http.get(
        Uri.parse('http://localhost:8080/api/shops/my-shop'),
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
      );

      if (myShopResponse.statusCode != 200) {
        print('Failed to fetch shop: ${myShopResponse.body}');
        setState(() {
          _isLoading = false;
        });
        return;
      }

      final myShopData = jsonDecode(myShopResponse.body);
      if (myShopData['statusCode'] != '0000' || myShopData['data'] == null) {
        setState(() {
          _isLoading = false;
        });
        return;
      }

      final shopId = myShopData['data']['shopId'];

      // Step 2: Fetch all orders
      final ordersResponse = await http.get(
        Uri.parse('http://localhost:8080/api/shops/$shopId/orders?page=0&size=1000'),
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
      );

      if (ordersResponse.statusCode == 200) {
        final ordersData = jsonDecode(ordersResponse.body);

        if (ordersData['statusCode'] == '0000' && ordersData['data'] != null) {
          final allOrders = ordersData['data']['orders'] ?? [];
          _processOrders(allOrders);
        }
      }

      setState(() {
        _isLoading = false;
      });
    } catch (e) {
      print('Error fetching payment data: $e');
      setState(() {
        _isLoading = false;
      });
    }
  }

  void _processOrders(List<dynamic> allOrders) {
    // Filter orders by date range
    List<dynamic> filteredOrders = allOrders.where((order) {
      final orderDate = DateTime.parse(order['createdAt']);
      if (_selectedStartDate != null && _selectedEndDate != null) {
        final startOfDay = DateTime(_selectedStartDate!.year, _selectedStartDate!.month, _selectedStartDate!.day);
        final endOfDay = DateTime(_selectedEndDate!.year, _selectedEndDate!.month, _selectedEndDate!.day, 23, 59, 59);
        return orderDate.isAfter(startOfDay.subtract(const Duration(seconds: 1))) &&
               orderDate.isBefore(endOfDay.add(const Duration(seconds: 1)));
      }
      return true;
    }).toList();

    // Filter by payment status
    if (_selectedPaymentStatus != 'ALL') {
      filteredOrders = filteredOrders.where((order) {
        final isPaid = order['paymentStatus'] == 'PAID' ||
                       order['paymentStatus'] == 'COMPLETED' ||
                       order['status'] == 'DELIVERED';
        return _selectedPaymentStatus == 'PAID' ? isPaid : !isPaid;
      }).toList();
    }

    // Calculate totals
    double todayTotal = 0.0;
    int todayOrderCount = 0;
    double todayCollected = 0.0;
    double totalPaid = 0.0;
    double totalUnpaid = 0.0;
    int paidCount = 0;
    int unpaidCount = 0;
    List<dynamic> todayOrders = [];

    final today = DateTime.now();
    final startOfToday = DateTime(today.year, today.month, today.day);
    final endOfToday = DateTime(today.year, today.month, today.day, 23, 59, 59);

    // Calculate weekly data (last 7 days)
    List<Map<String, dynamic>> weeklyData = [];
    for (int i = 6; i >= 0; i--) {
      final dayDate = DateTime.now().subtract(Duration(days: i));
      final startOfDay = DateTime(dayDate.year, dayDate.month, dayDate.day);
      final endOfDay = DateTime(dayDate.year, dayDate.month, dayDate.day, 23, 59, 59);

      int dayOrderCount = 0;
      double dayTotal = 0.0;
      double dayCollected = 0.0;

      for (var order in allOrders) {
        final orderDate = DateTime.parse(order['createdAt']);
        if (orderDate.isAfter(startOfDay.subtract(const Duration(seconds: 1))) &&
            orderDate.isBefore(endOfDay.add(const Duration(seconds: 1)))) {
          final amount = (order['totalAmount'] ?? 0).toDouble();
          final isPaid = order['paymentStatus'] == 'PAID' ||
                         order['paymentStatus'] == 'COMPLETED' ||
                         order['status'] == 'DELIVERED';

          dayOrderCount++;
          dayTotal += amount;
          if (isPaid) {
            dayCollected += amount;
          }
        }
      }

      weeklyData.add({
        'date': startOfDay,
        'dayName': DateFormat('EEEE').format(startOfDay), // Full day name (Monday, Tuesday, etc.)
        'shortDayName': DateFormat('EEE').format(startOfDay), // Short name for display
        'orderCount': dayOrderCount,
        'total': dayTotal,
        'collected': dayCollected,
      });
    }

    for (var order in filteredOrders) {
      final amount = (order['totalAmount'] ?? 0).toDouble();
      final orderDate = DateTime.parse(order['createdAt']);
      final isPaid = order['paymentStatus'] == 'PAID' ||
                     order['paymentStatus'] == 'COMPLETED' ||
                     order['status'] == 'DELIVERED';

      // Check if order is from today
      final isToday = orderDate.isAfter(startOfToday.subtract(const Duration(seconds: 1))) &&
                      orderDate.isBefore(endOfToday.add(const Duration(seconds: 1)));

      // Calculate today's totals
      if (isToday) {
        todayTotal += amount;
        todayOrderCount++;
        todayOrders.add(order);
        if (isPaid) {
          todayCollected += amount;
        }
      }

      // Calculate paid/unpaid totals
      if (isPaid) {
        totalPaid += amount;
        paidCount++;
      } else {
        totalUnpaid += amount;
        unpaidCount++;
      }
    }

    // Calculate platform commission and shop owner earnings
    final commission = totalPaid * (_commissionPercent / 100);
    final earnings = totalPaid - commission;

    setState(() {
      _orders = filteredOrders;
      _todayOrders = todayOrders;
      _todayTotal = todayTotal;
      _todayOrderCount = todayOrderCount;
      _todayCollected = todayCollected;
      _totalPaid = totalPaid;
      _totalUnpaid = totalUnpaid;
      _paidCount = paidCount;
      _unpaidCount = unpaidCount;
      _platformCommission = commission;
      _shopOwnerEarnings = earnings;
      _weeklyData = weeklyData;
    });
  }

  Future<void> _selectDateRange() async {
    final DateTimeRange? picked = await showDateRangePicker(
      context: context,
      firstDate: DateTime(2020),
      lastDate: DateTime.now(),
      initialDateRange: _selectedStartDate != null && _selectedEndDate != null
          ? DateTimeRange(start: _selectedStartDate!, end: _selectedEndDate!)
          : DateTimeRange(start: DateTime.now(), end: DateTime.now()),
    );

    if (picked != null) {
      setState(() {
        _selectedStartDate = picked.start;
        _selectedEndDate = picked.end;
      });
      _fetchPaymentData();
    }
  }

  void _resetFilter() {
    setState(() {
      _selectedStartDate = DateTime.now();
      _selectedEndDate = DateTime.now();
      _selectedPaymentStatus = 'ALL';
    });
    _fetchPaymentData();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Payments'),
        backgroundColor: Theme.of(context).primaryColor,
        foregroundColor: Colors.white,
        actions: [
          IconButton(
            icon: const Icon(Icons.filter_list),
            onPressed: _showFilterDialog,
          ),
        ],
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : RefreshIndicator(
              onRefresh: _fetchPaymentData,
              child: Column(
                children: [
                  // Summary Cards
                  Container(
                    padding: const EdgeInsets.all(16),
                    color: Colors.grey[100],
                    child: Column(
                      children: [
                        // Daily Summary Card
                        Card(
                          elevation: 4,
                          color: Colors.green[700],
                          child: Padding(
                            padding: const EdgeInsets.all(20),
                            child: Column(
                              children: [
                                const Text(
                                  'TODAY\'S SUMMARY',
                                  style: TextStyle(
                                    fontSize: 14,
                                    color: Colors.white70,
                                    fontWeight: FontWeight.bold,
                                    letterSpacing: 1.2,
                                  ),
                                ),
                                const SizedBox(height: 16),
                                Row(
                                  mainAxisAlignment: MainAxisAlignment.spaceAround,
                                  children: [
                                    Column(
                                      children: [
                                        const Icon(Icons.shopping_bag, color: Colors.white, size: 32),
                                        const SizedBox(height: 8),
                                        Text(
                                          '$_todayOrderCount',
                                          style: const TextStyle(
                                            fontSize: 28,
                                            fontWeight: FontWeight.bold,
                                            color: Colors.white,
                                          ),
                                        ),
                                        const SizedBox(height: 4),
                                        const Text(
                                          'Orders',
                                          style: TextStyle(
                                            fontSize: 14,
                                            color: Colors.white70,
                                          ),
                                        ),
                                      ],
                                    ),
                                    Container(
                                      height: 60,
                                      width: 1,
                                      color: Colors.white30,
                                    ),
                                    Column(
                                      children: [
                                        const Icon(Icons.payments, color: Colors.white, size: 32),
                                        const SizedBox(height: 8),
                                        Text(
                                          '₹${_todayCollected.toStringAsFixed(0)}',
                                          style: const TextStyle(
                                            fontSize: 28,
                                            fontWeight: FontWeight.bold,
                                            color: Colors.white,
                                          ),
                                        ),
                                        const SizedBox(height: 4),
                                        const Text(
                                          'Collected',
                                          style: TextStyle(
                                            fontSize: 14,
                                            color: Colors.white70,
                                          ),
                                        ),
                                      ],
                                    ),
                                  ],
                                ),
                              ],
                            ),
                          ),
                        ),
                        const SizedBox(height: 12),
                        // Paid/Unpaid Summary
                        Row(
                          children: [
                            Expanded(
                              child: Card(
                                color: Colors.green[50],
                                child: Padding(
                                  padding: const EdgeInsets.all(16),
                                  child: Column(
                                    children: [
                                      Icon(Icons.check_circle, color: Colors.green[700], size: 32),
                                      const SizedBox(height: 8),
                                      Text(
                                        '₹${_totalPaid.toStringAsFixed(2)}',
                                        style: TextStyle(
                                          fontSize: 18,
                                          fontWeight: FontWeight.bold,
                                          color: Colors.green[700],
                                        ),
                                      ),
                                      const SizedBox(height: 4),
                                      Text(
                                        'Paid ($_paidCount)',
                                        style: TextStyle(
                                          fontSize: 14,
                                          color: Colors.green[600],
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                              ),
                            ),
                            const SizedBox(width: 8),
                            Expanded(
                              child: Card(
                                color: Colors.orange[50],
                                child: Padding(
                                  padding: const EdgeInsets.all(16),
                                  child: Column(
                                    children: [
                                      Icon(Icons.pending, color: Colors.orange[700], size: 32),
                                      const SizedBox(height: 8),
                                      Text(
                                        '₹${_totalUnpaid.toStringAsFixed(2)}',
                                        style: TextStyle(
                                          fontSize: 18,
                                          fontWeight: FontWeight.bold,
                                          color: Colors.orange[700],
                                        ),
                                      ),
                                      const SizedBox(height: 4),
                                      Text(
                                        'Unpaid ($_unpaidCount)',
                                        style: TextStyle(
                                          fontSize: 14,
                                          color: Colors.orange[600],
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                              ),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),

                  // Weekly Summary (Last 7 Days)
                  if (_weeklyData.isNotEmpty)
                    Container(
                      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          const Padding(
                            padding: EdgeInsets.symmetric(vertical: 8),
                            child: Text(
                              'LAST 7 DAYS',
                              style: TextStyle(
                                fontSize: 16,
                                fontWeight: FontWeight.bold,
                                letterSpacing: 0.5,
                              ),
                            ),
                          ),
                          SizedBox(
                            height: 160,
                            child: ListView.builder(
                              scrollDirection: Axis.horizontal,
                              itemCount: _weeklyData.length,
                              itemBuilder: (context, index) {
                                final dayData = _weeklyData[index];
                                final isToday = index == _weeklyData.length - 1;
                                final isYesterday = index == _weeklyData.length - 2;

                                return Container(
                                  width: 160,
                                  margin: const EdgeInsets.only(right: 12),
                                  child: Card(
                                    elevation: isToday ? 6 : 3,
                                    color: isToday
                                        ? Colors.green[700]
                                        : isYesterday
                                            ? Colors.blue[50]
                                            : Colors.white,
                                    shape: RoundedRectangleBorder(
                                      borderRadius: BorderRadius.circular(16),
                                      side: BorderSide(
                                        color: isToday
                                            ? Colors.green[900]!
                                            : isYesterday
                                                ? Colors.blue[300]!
                                                : Colors.grey[200]!,
                                        width: 2,
                                      ),
                                    ),
                                    child: Padding(
                                      padding: const EdgeInsets.all(16),
                                      child: Column(
                                        crossAxisAlignment: CrossAxisAlignment.start,
                                        children: [
                                          // Day name and badge
                                          Row(
                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                            children: [
                                              Expanded(
                                                child: Text(
                                                  dayData['dayName'],
                                                  style: TextStyle(
                                                    fontSize: 15,
                                                    fontWeight: FontWeight.bold,
                                                    color: isToday ? Colors.white : Colors.black87,
                                                  ),
                                                  overflow: TextOverflow.ellipsis,
                                                ),
                                              ),
                                              if (isToday)
                                                Container(
                                                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 3),
                                                  decoration: BoxDecoration(
                                                    color: Colors.white,
                                                    borderRadius: BorderRadius.circular(10),
                                                  ),
                                                  child: const Text(
                                                    'TODAY',
                                                    style: TextStyle(
                                                      fontSize: 9,
                                                      fontWeight: FontWeight.bold,
                                                      color: Colors.green,
                                                    ),
                                                  ),
                                                )
                                              else if (isYesterday)
                                                Container(
                                                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 3),
                                                  decoration: BoxDecoration(
                                                    color: Colors.blue[700],
                                                    borderRadius: BorderRadius.circular(10),
                                                  ),
                                                  child: const Text(
                                                    'YEST',
                                                    style: TextStyle(
                                                      fontSize: 9,
                                                      fontWeight: FontWeight.bold,
                                                      color: Colors.white,
                                                    ),
                                                  ),
                                                ),
                                            ],
                                          ),
                                          const SizedBox(height: 4),
                                          Text(
                                            DateFormat('MMM dd, yyyy').format(dayData['date']),
                                            style: TextStyle(
                                              fontSize: 11,
                                              color: isToday ? Colors.white70 : Colors.grey[600],
                                            ),
                                          ),
                                          const Spacer(),
                                          // Orders icon and count
                                          Row(
                                            children: [
                                              Icon(
                                                Icons.shopping_bag_outlined,
                                                size: 18,
                                                color: isToday ? Colors.white : Colors.grey[700],
                                              ),
                                              const SizedBox(width: 6),
                                              Text(
                                                '${dayData['orderCount']}',
                                                style: TextStyle(
                                                  fontSize: 20,
                                                  fontWeight: FontWeight.bold,
                                                  color: isToday ? Colors.white : Colors.black87,
                                                ),
                                              ),
                                              const SizedBox(width: 4),
                                              Text(
                                                'orders',
                                                style: TextStyle(
                                                  fontSize: 12,
                                                  color: isToday ? Colors.white70 : Colors.grey[600],
                                                ),
                                              ),
                                            ],
                                          ),
                                          const SizedBox(height: 12),
                                          // Collected amount
                                          Row(
                                            children: [
                                              Icon(
                                                Icons.currency_rupee,
                                                size: 16,
                                                color: isToday ? Colors.white : Colors.green[700],
                                              ),
                                              Text(
                                                '${dayData['collected'].toStringAsFixed(0)}',
                                                style: TextStyle(
                                                  fontSize: 18,
                                                  fontWeight: FontWeight.bold,
                                                  color: isToday ? Colors.white : Colors.green[700],
                                                ),
                                              ),
                                            ],
                                          ),
                                          Text(
                                            'collected',
                                            style: TextStyle(
                                              fontSize: 11,
                                              color: isToday ? Colors.white70 : Colors.grey[600],
                                            ),
                                          ),
                                        ],
                                      ),
                                    ),
                                  ),
                                );
                              },
                            ),
                          ),
                        ],
                      ),
                    ),

                  // Filter Chips
                  Container(
                    padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                    child: Row(
                      children: [
                        Chip(
                          label: Text(
                            _selectedStartDate != null && _selectedEndDate != null
                                ? '${DateFormat('dd MMM').format(_selectedStartDate!)} - ${DateFormat('dd MMM').format(_selectedEndDate!)}'
                                : 'Select Date',
                          ),
                          onDeleted: _selectedStartDate != null ? _resetFilter : null,
                          deleteIcon: const Icon(Icons.close, size: 18),
                        ),
                        const SizedBox(width: 8),
                        ActionChip(
                          label: const Text('Change Date'),
                          onPressed: _selectDateRange,
                          avatar: const Icon(Icons.calendar_today, size: 18),
                        ),
                      ],
                    ),
                  ),

                  // Orders List
                  Expanded(
                    child: _orders.isEmpty
                        ? Center(
                            child: Column(
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                Icon(Icons.payment, size: 64, color: Colors.grey[400]),
                                const SizedBox(height: 16),
                                Text(
                                  'No orders found',
                                  style: TextStyle(fontSize: 16, color: Colors.grey[600]),
                                ),
                              ],
                            ),
                          )
                        : ListView.builder(
                            padding: const EdgeInsets.all(16),
                            itemCount: _orders.length,
                            itemBuilder: (context, index) {
                              final order = _orders[index];
                              final isPaid = order['paymentStatus'] == 'PAID' ||
                                           order['paymentStatus'] == 'COMPLETED' ||
                                           order['status'] == 'DELIVERED';
                              final amount = (order['totalAmount'] ?? 0).toDouble();
                              final orderDate = DateTime.parse(order['createdAt']);

                              return Card(
                                margin: const EdgeInsets.only(bottom: 12),
                                child: ListTile(
                                  contentPadding: const EdgeInsets.all(16),
                                  leading: Container(
                                    width: 48,
                                    height: 48,
                                    decoration: BoxDecoration(
                                      color: isPaid ? Colors.green[100] : Colors.orange[100],
                                      borderRadius: BorderRadius.circular(8),
                                    ),
                                    child: Icon(
                                      isPaid ? Icons.check_circle : Icons.pending,
                                      color: isPaid ? Colors.green[700] : Colors.orange[700],
                                    ),
                                  ),
                                  title: Row(
                                    children: [
                                      Expanded(
                                        child: Text(
                                          order['customerName'] ?? 'Unknown Customer',
                                          style: const TextStyle(
                                            fontWeight: FontWeight.bold,
                                            fontSize: 16,
                                          ),
                                        ),
                                      ),
                                      Text(
                                        '₹${amount.toStringAsFixed(2)}',
                                        style: TextStyle(
                                          fontSize: 18,
                                          fontWeight: FontWeight.bold,
                                          color: isPaid ? Colors.green[700] : Colors.orange[700],
                                        ),
                                      ),
                                    ],
                                  ),
                                  subtitle: Column(
                                    crossAxisAlignment: CrossAxisAlignment.start,
                                    children: [
                                      const SizedBox(height: 4),
                                      Text('Order #${order['orderNumber']}'),
                                      const SizedBox(height: 4),
                                      Row(
                                        children: [
                                          Icon(Icons.calendar_today, size: 14, color: Colors.grey[600]),
                                          const SizedBox(width: 4),
                                          Text(
                                            DateFormat('dd MMM yyyy, hh:mm a').format(orderDate),
                                            style: TextStyle(fontSize: 12, color: Colors.grey[600]),
                                          ),
                                        ],
                                      ),
                                      const SizedBox(height: 8),
                                      Row(
                                        children: [
                                          Container(
                                            padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                                            decoration: BoxDecoration(
                                              color: isPaid ? Colors.green[100] : Colors.orange[100],
                                              borderRadius: BorderRadius.circular(12),
                                            ),
                                            child: Text(
                                              isPaid ? 'PAID' : 'UNPAID',
                                              style: TextStyle(
                                                fontSize: 12,
                                                fontWeight: FontWeight.bold,
                                                color: isPaid ? Colors.green[700] : Colors.orange[700],
                                              ),
                                            ),
                                          ),
                                          const SizedBox(width: 8),
                                          Container(
                                            padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                                            decoration: BoxDecoration(
                                              color: _getStatusColor(order['status']).withOpacity(0.1),
                                              borderRadius: BorderRadius.circular(12),
                                            ),
                                            child: Text(
                                              order['status'] ?? 'UNKNOWN',
                                              style: TextStyle(
                                                fontSize: 12,
                                                fontWeight: FontWeight.w500,
                                                color: _getStatusColor(order['status']),
                                              ),
                                            ),
                                          ),
                                        ],
                                      ),
                                    ],
                                  ),
                                ),
                              );
                            },
                          ),
                  ),
                ],
              ),
            ),
    );
  }

  void _showFilterDialog() {
    showModalBottomSheet(
      context: context,
      builder: (context) {
        return StatefulBuilder(
          builder: (context, setModalState) {
            return Container(
              padding: const EdgeInsets.all(20),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text(
                    'Filter Payments',
                    style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                  ),
                  const SizedBox(height: 20),
                  const Text('Payment Status', style: TextStyle(fontSize: 16, fontWeight: FontWeight.w500)),
                  const SizedBox(height: 8),
                  Wrap(
                    spacing: 8,
                    children: [
                      FilterChip(
                        label: const Text('All'),
                        selected: _selectedPaymentStatus == 'ALL',
                        onSelected: (selected) {
                          setModalState(() {
                            _selectedPaymentStatus = 'ALL';
                          });
                          setState(() {
                            _selectedPaymentStatus = 'ALL';
                          });
                        },
                      ),
                      FilterChip(
                        label: const Text('Paid'),
                        selected: _selectedPaymentStatus == 'PAID',
                        onSelected: (selected) {
                          setModalState(() {
                            _selectedPaymentStatus = 'PAID';
                          });
                          setState(() {
                            _selectedPaymentStatus = 'PAID';
                          });
                        },
                      ),
                      FilterChip(
                        label: const Text('Unpaid'),
                        selected: _selectedPaymentStatus == 'UNPAID',
                        onSelected: (selected) {
                          setModalState(() {
                            _selectedPaymentStatus = 'UNPAID';
                          });
                          setState(() {
                            _selectedPaymentStatus = 'UNPAID';
                          });
                        },
                      ),
                    ],
                  ),
                  const SizedBox(height: 24),
                  Row(
                    children: [
                      Expanded(
                        child: OutlinedButton(
                          onPressed: () {
                            Navigator.pop(context);
                            _resetFilter();
                          },
                          child: const Text('Reset'),
                        ),
                      ),
                      const SizedBox(width: 12),
                      Expanded(
                        child: ElevatedButton(
                          onPressed: () {
                            Navigator.pop(context);
                            _fetchPaymentData();
                          },
                          child: const Text('Apply'),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            );
          },
        );
      },
    );
  }

  Color _getStatusColor(String? status) {
    switch (status) {
      case 'PENDING': return Colors.orange;
      case 'CONFIRMED': return Colors.blue;
      case 'PREPARING': return Colors.purple;
      case 'READY_FOR_PICKUP': return Colors.teal;
      case 'OUT_FOR_DELIVERY': return Colors.indigo;
      case 'DELIVERED': return Colors.green;
      case 'CANCELLED': return Colors.red;
      default: return Colors.grey;
    }
  }
}
