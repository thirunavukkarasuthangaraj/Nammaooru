package com.shopmanagement.controller;

import com.shopmanagement.common.dto.ApiResponse;
import com.shopmanagement.common.util.ResponseUtil;
import com.shopmanagement.dto.auth.WhatsAppOTPRequest;
import com.shopmanagement.dto.auth.WhatsAppVerifyRequest;
import com.shopmanagement.dto.auth.AuthResponse;
import com.shopmanagement.service.WhatsAppAuthService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import jakarta.validation.Valid;
import java.util.Map;

@RestController
@RequestMapping("/api/auth/whatsapp")
@RequiredArgsConstructor
@Slf4j
@CrossOrigin(origins = "*")
public class WhatsAppAuthController {

    private final WhatsAppAuthService whatsAppAuthService;

    /**
     * Send OTP via WhatsApp or SMS
     */
    @PostMapping("/send-otp")
    public ResponseEntity<ApiResponse<Map<String, Object>>> sendOTP(@Valid @RequestBody WhatsAppOTPRequest request) {
        log.info("Sending OTP to mobile number: {} via {}", request.getMobileNumber(), request.getChannel());

        try {
            Map<String, Object> response = whatsAppAuthService.sendOTP(
                request.getMobileNumber(),
                request.getChannel(),
                request.getName(),
                request.getPurpose()
            );

            return ResponseUtil.success(response, "OTP sent successfully");
        } catch (Exception e) {
            log.error("Error sending OTP: ", e);
            return ResponseUtil.error("Failed to send OTP: " + e.getMessage());
        }
    }

    /**
     * Verify OTP and authenticate user
     */
    @PostMapping("/verify-otp")
    public ResponseEntity<ApiResponse<AuthResponse>> verifyOTP(@Valid @RequestBody WhatsAppVerifyRequest request) {
        log.info("Verifying OTP for mobile number: {}", request.getMobileNumber());

        try {
            AuthResponse response = whatsAppAuthService.verifyOTP(
                request.getMobileNumber(),
                request.getOtp(),
                request.getDeviceToken(),
                request.getDeviceType()
            );

            return ResponseUtil.success(response, "OTP verified successfully");
        } catch (Exception e) {
            log.error("Error verifying OTP: ", e);
            return ResponseUtil.error("Failed to verify OTP: " + e.getMessage());
        }
    }

    /**
     * Resend OTP
     */
    @PostMapping("/resend-otp")
    public ResponseEntity<ApiResponse<Map<String, Object>>> resendOTP(@Valid @RequestBody WhatsAppOTPRequest request) {
        log.info("Resending OTP to mobile number: {} via {}", request.getMobileNumber(), request.getChannel());

        try {
            Map<String, Object> response = whatsAppAuthService.resendOTP(
                request.getMobileNumber(),
                request.getChannel()
            );

            return ResponseUtil.success(response, "OTP resent successfully");
        } catch (Exception e) {
            log.error("Error resending OTP: ", e);
            return ResponseUtil.error("Failed to resend OTP: " + e.getMessage());
        }
    }

    /**
     * Check OTP status
     */
    @GetMapping("/status/{mobileNumber}")
    public ResponseEntity<ApiResponse<Map<String, Object>>> checkOTPStatus(@PathVariable String mobileNumber) {
        log.info("Checking OTP status for mobile number: {}", mobileNumber);

        try {
            Map<String, Object> response = whatsAppAuthService.getOTPStatus(mobileNumber);
            return ResponseUtil.success(response, "OTP status retrieved successfully");
        } catch (Exception e) {
            log.error("Error checking OTP status: ", e);
            return ResponseUtil.error("Failed to check OTP status: " + e.getMessage());
        }
    }
}