package com.shopmanagement.delivery.controller;

import com.shopmanagement.delivery.dto.PartnerLocationDto;
import com.shopmanagement.delivery.service.LiveTrackingService;
import com.shopmanagement.common.dto.ApiResponse;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;

//@RestController
@RequestMapping("/api/delivery/tracking")
@RequiredArgsConstructor
@Slf4j
public class LiveTrackingController {

    private final LiveTrackingService liveTrackingService;

    @GetMapping("/partner/{partnerId}/current")
    @PreAuthorize("hasAnyRole('SUPER_ADMIN', 'ADMIN', 'DELIVERY_PARTNER', 'USER')")
    public ResponseEntity<ApiResponse<PartnerLocationDto>> getCurrentPartnerLocation(
            @PathVariable Long partnerId) {
        try {
            PartnerLocationDto location = liveTrackingService.getCurrentPartnerLocation(partnerId);
            if (location != null) {
                return ResponseEntity.ok(ApiResponse.success(location, "Partner location retrieved successfully"));
            } else {
                return ResponseEntity.ok(ApiResponse.success(null, "Partner location not available"));
            }
        } catch (Exception e) {
            log.error("Error getting partner location: {}", e.getMessage());
            return ResponseEntity.internalServerError()
                    .body(ApiResponse.error("Failed to get partner location: " + e.getMessage()));
        }
    }

    @PostMapping("/partner/{partnerId}/location")
    @PreAuthorize("hasRole('DELIVERY_PARTNER')")
    public ResponseEntity<ApiResponse<String>> updatePartnerLocation(
            @PathVariable Long partnerId,
            @RequestBody PartnerLocationDto locationDto) {
        try {
            liveTrackingService.updatePartnerLocation(partnerId, locationDto);
            return ResponseEntity.ok(ApiResponse.success("Location updated successfully"));
        } catch (Exception e) {
            log.error("Error updating partner location: {}", e.getMessage());
            return ResponseEntity.internalServerError()
                    .body(ApiResponse.error("Failed to update location: " + e.getMessage()));
        }
    }

    @GetMapping("/partners/active")
    @PreAuthorize("hasAnyRole('SUPER_ADMIN', 'ADMIN')")
    public ResponseEntity<ApiResponse<List<PartnerLocationDto>>> getActivePartners() {
        try {
            List<PartnerLocationDto> activePartners = liveTrackingService.getAllActivePartners();
            return ResponseEntity.ok(ApiResponse.success(activePartners, "Active partners retrieved successfully"));
        } catch (Exception e) {
            log.error("Error getting active partners: {}", e.getMessage());
            return ResponseEntity.internalServerError()
                    .body(ApiResponse.error("Failed to get active partners: " + e.getMessage()));
        }
    }

    @GetMapping("/partner/{partnerId}/history")
    @PreAuthorize("hasAnyRole('SUPER_ADMIN', 'ADMIN', 'DELIVERY_PARTNER')")
    public ResponseEntity<ApiResponse<List<PartnerLocationDto>>> getPartnerLocationHistory(
            @PathVariable Long partnerId,
            @RequestParam(defaultValue = "24") int hours) {
        try {
            List<PartnerLocationDto> history = liveTrackingService.getPartnerLocationHistory(partnerId, hours);
            return ResponseEntity.ok(ApiResponse.success(history, "Location history retrieved successfully"));
        } catch (Exception e) {
            log.error("Error getting location history: {}", e.getMessage());
            return ResponseEntity.internalServerError()
                    .body(ApiResponse.error("Failed to get location history: " + e.getMessage()));
        }
    }

    @PostMapping("/session/start")
    @PreAuthorize("hasRole('DELIVERY_PARTNER')")
    public ResponseEntity<ApiResponse<String>> startTrackingSession(
            @RequestParam Long partnerId,
            @RequestParam Long assignmentId) {
        try {
            liveTrackingService.startTrackingSession(partnerId, assignmentId);
            return ResponseEntity.ok(ApiResponse.success("Tracking session started successfully"));
        } catch (Exception e) {
            log.error("Error starting tracking session: {}", e.getMessage());
            return ResponseEntity.internalServerError()
                    .body(ApiResponse.error("Failed to start tracking session: " + e.getMessage()));
        }
    }

    @PostMapping("/session/stop")
    @PreAuthorize("hasRole('DELIVERY_PARTNER')")
    public ResponseEntity<ApiResponse<String>> stopTrackingSession(
            @RequestParam Long partnerId,
            @RequestParam Long assignmentId) {
        try {
            liveTrackingService.stopTrackingSession(partnerId, assignmentId);
            return ResponseEntity.ok(ApiResponse.success("Tracking session stopped successfully"));
        } catch (Exception e) {
            log.error("Error stopping tracking session: {}", e.getMessage());
            return ResponseEntity.internalServerError()
                    .body(ApiResponse.error("Failed to stop tracking session: " + e.getMessage()));
        }
    }

    @PutMapping("/partner/{partnerId}/status")
    @PreAuthorize("hasRole('DELIVERY_PARTNER')")
    public ResponseEntity<ApiResponse<String>> updatePartnerStatus(
            @PathVariable Long partnerId,
            @RequestParam String status) {
        try {
            liveTrackingService.updatePartnerStatus(partnerId, status);
            return ResponseEntity.ok(ApiResponse.success("Partner status updated successfully"));
        } catch (Exception e) {
            log.error("Error updating partner status: {}", e.getMessage());
            return ResponseEntity.internalServerError()
                    .body(ApiResponse.error("Failed to update partner status: " + e.getMessage()));
        }
    }
}